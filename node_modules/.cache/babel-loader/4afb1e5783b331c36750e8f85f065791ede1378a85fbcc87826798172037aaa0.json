{"ast":null,"code":"import _slicedToArray from \"C:/Users/anuja/Desktop/web development/expensetracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\anuja\\\\Desktop\\\\web development\\\\expensetracker\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ExpenseForm = function ExpenseForm(props) {\n  _s();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredTitle = _useState2[0],\n    setEnteredTitle = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    enteredAmount = _useState4[0],\n    setEnteredAmount = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    enteredDate = _useState6[0],\n    setEnteredDate = _useState6[1];\n\n  // const [userInput , setUserInput]= useState({\n  //   enteredTitle: '',\n\n  //   enteredAmount: '',\n  //   enteredDate:'',\n\n  //})\n  var titleChangeHandler = function titleChangeHandler(event) {\n    //    setUserInput({\n    setEnteredTitle(event.target.value);\n    //     ...userInput,\n    //     enteredTitle: event.target.value,\n    //    })\n  };\n\n  //  setUserInput((prevState) => {    // safer way to ensure that you always operate on the latest state snapshot.\n  //   return {...prevState , enteredTitle:event.targte.value };\n\n  //  })\n\n  var amountChangeHandler = function amountChangeHandler(event) {\n    setEnteredAmount(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // })\n  };\n\n  var dateChangeHandler = function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n    //   setUserInput({\n    //     ...userInput,\n    //     enteredDate:event.target.value,\n    //   })\n    // }\n\n    // const inputChangeHandler = (identifier , value) => {\n    //   if (identifier === 'title') {\n    //     setEnteredTitle(value);\n    //   }else if (identifier === 'date'){\n    //     setEnteredDate(value);\n    //   }else{\n    //     setEnteredAmount(value);\n    //   }\n\n    // };\n  };\n\n  var submitHandler = function submitHandler(event) {\n    event.preventDefault(); // built into javascript behaviour. nothing on react\n    // preventing the default of this request being sent and the page will not reload.\n\n    var expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(''); //These lines clear the form input fields (or state variables) after the form data has been processed and saved. \n    //This is often done to reset the form to its initial state after a submission.\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, _this);\n};\n_s(ExpenseForm, \"4e443+Dcc0POOxOyquGUzCRQw8s=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","props","_s","_useState","_useState2","_slicedToArray","enteredTitle","setEnteredTitle","_useState3","_useState4","enteredAmount","setEnteredAmount","_useState5","_useState6","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_this","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["C:/Users/anuja/Desktop/web development/expensetracker/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":[" import React , {useState} from \"react\";\r\n import \"./ExpenseForm.css\";\r\n \r\n\r\n \r\n const ExpenseForm = (props) => {\r\n  const [enteredTitle , setEnteredTitle] = useState('');\r\n\r\n  const [enteredAmount , setEnteredAmount] = useState('');\r\n\r\n  const [enteredDate , setEnteredDate] = useState('');\r\n\r\n\r\n// const [userInput , setUserInput]= useState({\r\n//   enteredTitle: '',\r\n\r\n//   enteredAmount: '',\r\n//   enteredDate:'',\r\n\r\n//})\r\n    const titleChangeHandler = (event) =>{\r\n    //    setUserInput({\r\n    setEnteredTitle(event.target.value);\r\n    //     ...userInput,\r\n    //     enteredTitle: event.target.value,\r\n    //    })\r\n        \r\n     };\r\n       \r\n        //  setUserInput((prevState) => {    // safer way to ensure that you always operate on the latest state snapshot.\r\n        //   return {...prevState , enteredTitle:event.targte.value };\r\n\r\n        //  })\r\n\r\n    const amountChangeHandler = (event)=>{\r\n          setEnteredAmount(event.target.value);\r\n          // setUserInput({\r\n          //   ...userInput,\r\n          //   enteredAmount: event.target.value,\r\n          // })\r\n    };\r\n\r\n    const dateChangeHandler = (event) =>{\r\n      setEnteredDate(event.target.value);\r\n    //   setUserInput({\r\n    //     ...userInput,\r\n    //     enteredDate:event.target.value,\r\n    //   })\r\n    // }\r\n          \r\n    // const inputChangeHandler = (identifier , value) => {\r\n    //   if (identifier === 'title') {\r\n    //     setEnteredTitle(value);\r\n    //   }else if (identifier === 'date'){\r\n    //     setEnteredDate(value);\r\n    //   }else{\r\n    //     setEnteredAmount(value);\r\n    //   }\r\n\r\n    // };\r\n    };\r\n         const submitHandler = (event) => {\r\n           event.preventDefault(); // built into javascript behaviour. nothing on react\r\n           // preventing the default of this request being sent and the page will not reload.\r\n          \r\n           const expenseData = {\r\n            title: enteredTitle,\r\n            amount:enteredAmount,\r\n            date : new Date(enteredDate),\r\n           }\r\n\r\n           \r\n           props.onSaveExpenseData(expenseData);\r\n           setEnteredTitle('');    //These lines clear the form input fields (or state variables) after the form data has been processed and saved. \r\n           //This is often done to reset the form to its initial state after a submission.\r\n           setEnteredAmount('');\r\n           setEnteredDate('');\r\n\r\n\r\n\r\n\r\n         };\r\n\r\n      \r\n      \r\n\r\n      \r\n\r\n    return(\r\n        <form onSubmit = {submitHandler} >\r\n        <div className='new-expense__controls'>\r\n          <div className='new-expense__control'>\r\n            <label>Title</label>\r\n            <input \r\n            type='text'\r\n            value ={enteredTitle}\r\n            onChange={titleChangeHandler} />\r\n          </div>\r\n          <div className='new-expense__control'>\r\n            <label>Amount</label>\r\n            <input \r\n            type='number' \r\n            min='0.01'\r\n             step='0.01'\r\n             value = {enteredAmount}\r\n              onChange = {amountChangeHandler}/>\r\n          </div>\r\n          <div className='new-expense__control'>\r\n            <label>Date</label>\r\n            <input\r\n             type='date' \r\n             min='2019-01-01' \r\n             max='2022-12-31' \r\n             value = {enteredDate}\r\n             onChange = {dateChangeHandler} />\r\n          </div>\r\n        </div>\r\n        <div className='new-expense__actions'>\r\n          <button type='submit'>Add Expense</button>\r\n          \r\n        </div>\r\n      </form>\r\n       \r\n    )\r\n\r\n    \r\n    \r\n    };\r\n \r\n export default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}